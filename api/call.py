#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import base64, json
from api import FaceidIdcardOCR, TencentIdcardOCR, XunfeiIdcardOCR
from api import TencentInvoiceOCR, XunfeiInvoiceOCR
from api import XunfeiGeneralOCR, TencentGeneralOCR

from api import func


def idcard_ocr(file_path, side='front', api='faceid'):
    """
    调用身份证ocr
    :param file_path:
    :param side:
    :param api:
    :return:
    """
    file = func.read_file(file_path)
    if not file:
        raise Exception('文件读取失败')
    if api == 'faceid':
        result = FaceidIdcardOCR.ocr(file, side)
    elif api == 'tencent':
        result = TencentIdcardOCR.ocr(file, side)
    elif api == 'xunfei':
        result = XunfeiIdcardOCR.ocr(file, side)
    else:
        raise Exception('接口未知')
    return result


def invoice_ocr(file_path, api='tencent'):
    """
    调用发票识别
    :param file_path:
    :param api:
    :return:
    """
    file = func.read_file(file_path)
    if not file:
        raise Exception('文件读取失败')
    if api == 'tencent':
        result = TencentInvoiceOCR.ocr(file)
    elif api == 'xunfei':
        xunfei = XunfeiInvoiceOCR.InvoiceOCR()
        result = xunfei.ocr(file)
    else:
        raise Exception('接口未知')
    return result


def general_ocr(file_path, api='xunfei'):
    """
    通用文字识别
    :param file_path:
    :param api:
    :return:
    """
    file = func.read_file(file_path)
    if not file:
        raise Exception('文件读取失败')
    if api == 'xunfei':
        result = XunfeiGeneralOCR.ocr(file)
    elif api == 'tencent':
        result = TencentGeneralOCR.ocr(file)
    else:
        raise Exception('接口未知')
    return result


if __name__ == '__main__':
    #print(json.dumps(general_ocr('../uploads/table.jpg', 'xunfei')))

    res = '{"status": true, "msg": "success", "data": ["\u5fc3\u91cc\u7a0b\u516c\u76ca\u9879\u76ee\u3010\u671f\u9879\u76ee\u529e\u516c\u5ba4", "\u5fc3\u91cc\u7a0b\u516c\u76ca\u9879\u76eeII\u671f", "\u533b\u5b66\u6761\u4ef6\u786e\u8ba4\u8868", "\u8bf7\u7533\u8bf7\u4eba\u586b\u5199", "\u59d3\u540d\u738b\u660e\u73b2\u6027\u522b\u53e3\u7537M\u5973\u5e74\u9f84\uff1a73\u624b\u673a\u53f7\u780113072218128", "\u8eab\u4efd\u8bc1\u53f7\uff1a120104194606081826", "2019\u5e749\u6708", "\u533b\u4fdd\u6240\u5c5e\u5730", "\u5929\u6d25\u5e02\u662f\u5426\u4e8b\u53d7\u533b\u4fdd", "\u9879\u76ee\u533b\u9662", "\u5929\u6d25\u5e02\u4eba\u6c11\u533b\u9662", "\u9879\u76ee\u533b\u751f", "\u66f9\u660e\u82f1", "\u8bf7\u9879\u76ee\u533b\u751f\u586b\u5199", "\u7d20\u7684\u8054\u5f80\u5fc3\u6a21\u53f2\uff08\u5fc5\u9700\uff09", "\u63d0\u6027\u975e\u7ec8\u672a\u671f\u8bf7\u529f\u80fd\u4e0d\u5168\uff08\u808c\u6746\u6e05\u9664\u7387\u5c0f\u4e8e60ml/min)", "\u65b0\u662f\u5426\u884cPCI\u624b\u672f\uff08\u5fc5\u9700\uff09", "\u53e3\u9999", "\u662f\u5426\u6709\u9650\u5185\u51fa\u8840\u75c5\u53f2\uff08\u975e\u5fc5\u9700\uff09", "\u690d\u5165\u652f\u67b6\u4e2a\u6570\uff08\u975e\u5fc5\u9700\uff09", "\u662f\u5426\u8010\u53d7\u4fe1\u6797\u8fbe\uff08\u5fc5\u9700\uff09", "\u53e3\u5426", "(\u7981\u5fcc\u75c7\u5305\u62ec\uff1a\u5bf9\u66ff\u683c\u745e\u6d1b\u6216\u672c\u54c1\u4efb\u4f55\u8f85\u6599\u6210\u5206\u8fc7\u654f\u8005\uff0c\u6d3b\u52a8\u6027\u75c5\u7406\u6027\u51fa\u8840\uff08\u5982\u6d88\u5316\u6027", "\u662f\u5426\u5b58\u5728\u63aa\u7aef\u836f\u54c1\u7981\u5fcc\u5ea6\uff08\u5fc5\u9700\uff09", "\u6fc0\u70e7\u6216\u987e\u5185\u51fa\u8840\u7684\u60a3\u8005\uff0c\u6709\u968f\u5185\u51fa\u8840\u75c5\u53f2\u8005\uff0c\u91cd\u5ea6\u809d\u529f\u80fd\u635f\u5bb3\u60a3\u8005\uff0c\u56e0\u8054\u5408\u7528\u836f\u53ef\u5bfc", "(\u81f4\u547d\u6027\u6216\u9884\u5185\u51fa\u8840\uff0c\u6216\u4f34\u6709\u5fc3\u5305\u586b\u585e\u7684\u5fc3\u5305\u5185\u51fa\u8840\uff0c\u6210\u7531\u4e8e\u51fa\u8840\u6240\u5bfc\u81f4\u7684\u4f4e\u8840\u5bb9\u91cf", "\u6cbb\u7597\u8fc7\u7a0b\u4e2d\u662f\u5426\u6709\u9700\u8981\u4e34\u5e8a", "\u4f53\u514b\u6216\u4e25\u91cd\u4efb\u8840\u538b\u9700\u8981\u5347\u538b\u836f\u6216\u624b\u672f\uff0c\u6216\u7ed3\u5e8a\u663e\u7740\u6216\u660e\u663e\u51fa\u8840\u5bfc\u81f4\u7684\u8840\u7ea2\u86cb\u767d\u4e0b\u6d25\uff08\u5927", "\u5e72\u9884\u7684\u5927\u51fa\u8840\u4e8b\u4ef6\uff08\u975e\u5fc5\u9700\uff09", "\u6216\u56e0\u51fa\u8840\u800c\u8f93\u88402-3\u4e2a\u5355\u4f4d\uff08\u5168\u8840\u6216PRBC)\u7b49\uff09", "\u6b63\u5728\u4f7f\u7528\u7684\u673a\u8840\u5c0f\u677f\u7ea6\u7269\u60c5\u51b5\uff08\u5fc5\u8d39\uff09|\u963f\u53f8\u56db\u6797", "\u9879\u76ee\u533b\u751f\u5224\u65ad\u662f\u5426\u7b26\u5408\u5165\u7ec4\u7684\u533b\u5b66\u6807\u51c6", "\u8be5\u60a3\u8005\u662f\u5426\u7b26\u5408\u5165\u7ec4\u7684\u533b\u5b66\u6807\u51c6\uff08\u5fc5\u9700\uff09", "\u4e0d\u7b26\u5408", "\u9879\u76ee\u533b\u751f\u8005\uff1a\u5e38\u660e\u5171", "\u9879\u76ee\u533b\u751f\u76d1\u7406\uff1a", "\u586b\u8868\u65e5\u671f\uff1a2019.12.23", "2.\u8bf7\u7533\u8bf7\u4eba\u914d\u5408\u9879\u76ee\u533b\u751f\u5b8c\u80fd\u586b\u5199\u6bd4\u8868\uff0c\u8d77\u514d\u56e0\u586b\u5199\u539f\u56e0\uff08\u7f3a\u586b\u3001\u56ed\u586b\u3001\u9519\u586b\u7b49\uff09\u9020\u6210\u8868\u683c\u4f5c\u5e9f\u3002", "3.\u533b\u5b66\u6761\u4ef6\u5c4b\u5165\u7ec4\u6761\u4ef6\u4e2d\u7684\u5176\u4e2d\u4e00\u9879\uff0c\u60a3\u8005\u662f\u5426\u7b26\u5408\u5165\u7ec4\u6761\u4ef6\u7531\u5fc3\u91cc\u7a0b\u9879\u76ee\u529e\u516c\u5ba4\u5224\u65ad\u548c\u6700\u5c06\u51b3\u5b9a", "\u7cbe\u9020\u836f\u54c1\u7981\u6bcd\u4f4f\uff0c\u5373\u4f7f\u60a3\u8005\u63d0\u4ea4\u5176\u4ed6\u6240\u6709\u7533\u8bf7\u8d44\u6599\uff0c\u9879\u76ee\u529e\u4e5f\u53ef\u6709\u6743\u5224\u65ad\u60a3\u8005\u4e0d\u7b26\u5408\u5165\u7ec4\u6761\u4ef6\u3002", "\u9879\u76ee\u6444\u52a9\u70ed\u7ebf\uff1a4000-822-072\u5468\u4e00\u81f3\u5468\u4e949:00-17:30\u90ae\u653f\u4fe1\u7bb1\uff1a\u4e0a\u6d77\u90ae\u653f011-032\u4fe1\u7bb1"]}';
    res = json.loads(res)
    print(res['data'])
    print(XunfeiGeneralOCR.xlc_table(res['data']))

